# Project Euler | Problem ==> 2

'''
[x] Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10
    terms Will be:
                    1 2 3 5 8,13, 21,34, 55, 89,
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued
    terms.

'''
limit = 4000000


# We use a function to determine both the fibonacci sequence and extract the even values of the sequence
def even_fibonacci_pairs(limit):
    x, y = 1, 1
    pair_fibonacci = []  # We establish an empty list to store the values.

    while x <= limit:  # In this while loop we are both looking for the even values and extracting the Fibonacci sequence in a more compact way, than the code that we initially formed is more crude.
        if x % 2 == 0:
            pair_fibonacci.append(x)

        x, y = y, x + y

    return pair_fibonacci  # Only the even numbers of the sequence are returned


if __name__ == "__main__":

    x = 1
    y = 1

    pair_fibonacci = []
    fibonacci = [x]

    while x + y < limit:  # Here we use a while in a more extensive and less simple way to obtain the Fibonacci sequence and we also extract the pairs from the sequence, contrary to how we did it in the function that performs the same task.
        z = x + y
        x = y
        y = z
        fibonacci.append(x)

        if x % 2 == 0:  # We take out the even values of the Fibonacci sequence
            pair_fibonacci.append(x)

    #  In this part until the end print the code result to extract the Fibonacci sequence on the screen

    print(f'>> Even values in fibonacci sequence |  {pair_fibonacci}\n')

    F_pair_fibonacci = even_fibonacci_pairs(limit)
    print(
        f'>> Even values in fibonacci sequence using functions  |   {F_pair_fibonacci} \n')

    print(fibonacci)
